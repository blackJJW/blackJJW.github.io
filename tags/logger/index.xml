<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logger :: Tag :: Black_JJW&#39;s Blog</title>
    <link>https://blackjjw.github.io/tags/logger/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://blackjjw.github.io/tags/logger/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Logger Configuration</title>
      <link>https://blackjjw.github.io/projects/multi-crypto-trading-tool/loggerconfig/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/projects/multi-crypto-trading-tool/loggerconfig/index.html</guid>
      <description>For operating this project reliably, I need a robust logging system. So I decided the Loguru library for its simplicity and powerful features. The configuration was customized to meet the following requirements:&#xA;Custom Log Formatting Example: 2025-06-26 23:09:24 | INFO | main :lifespan :16 - Starting up the application... Persistent Log Files Save logs using filenames that include the current date. Retain logs for 7 days only. Integration with FastAPI and Uvicorn Logs Ensure logs from FastAPI, Uvicorn, and Starlette are captured uniformly 1. Pseudocode Summary IF LogConfigurator not configured: - Create log directory - Remove default handlers - Add colored console logger - Add rotating file logger - Setup InterceptHandler for uvicorn/starlette/fastapi loggers - Mark as configured 2. How I Configured the Logger To satisfy the logging requirements mentioned above, I built a singleton LogConfigurator using Loguru, which includes: 2.1. Singleton Pattern I wanted to ensure that the logger is configured only once, even if multiple modules try to initialize it. The class uses a standard __new__ pattern to maintain a single instance. def _new__(cls, *args, **kwargs): if cls._instance is None: cls._instance = super().__new__(cls) return cls._instance 2.2 Log File Management Each log file is automatically named using the current date and saved under /backend/logs. I use Loguru’s built-in rotation and retention to: Create a new file every day at midnight Retain logs only for 7 days Avoid manual cleanup logger.add( str(self.log_file), rotation=&#34;00:00&#34;, # Daily rotation retention=&#34;7 days&#34;, # Keep logs for 7 days encoding=&#34;utf-8&#34;, level=&#34;INFO&#34;, ... ) 2.3 Console Output with Colors Loguru’s colorize=True option lets me apply colors to console logs, improving readability during development. logger.add( sys.stdout, level=&#34;INFO&#34;, colorize=True, format=&#34;&lt;green&gt;{time:YYYY-MM-DD HH:mm:ss}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name: &lt;20}&lt;/cyan&gt;:&lt;cyan&gt;{function: &lt;15}&lt;/cyan&gt;:&lt;cyan&gt;{line: &lt;4}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;&#34;, ) 2.4 Intercepting FastAPI/Uvicorn Logs By default, FastAPI and Uvicorn use the built-in logging module. To unify all logs under Loguru, I wrote a custom InterceptHandler which: Captures standard logging logs Redirects them to Loguru with correct context (function name, line number, etc.) logging.basicConfig( handlers=[InterceptHandler()], level=logging.INFO, force=True ) I explicitly intercept common loggers: loggers_to_intercept = [ &#34;uvicorn&#34;, &#34;uvicorn.access&#34;, &#34;uvicorn.error&#34;, &#34;fastapi&#34;, &#34;starlette&#34;, &#34;starlette.routing&#34;, ] 2.5 Execution Outputs</description>
    </item>
  </channel>
</rss>