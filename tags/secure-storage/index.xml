<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secure-Storage :: Tag :: Black_JJW&#39;s Blog</title>
    <link>https://blackjjw.github.io/tags/secure-storage/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://blackjjw.github.io/tags/secure-storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10. Managing API Keys - Backend Implementation</title>
      <link>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/mngapikeys1/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/mngapikeys1/index.html</guid>
      <description>Managing API Keys from multiple exchanges requires both exchange metadata management and secure key storage. In this post, I describe the database schema and service logic used to support this.&#xA;1. The Design of the API Key Management System 1.1 ERD The functionality is based on three relational tables: TB_USER, TB_EXCHANGES, and TB_EXCHANGE_API_KEYS.&#xA;TB_EXCHANGES stores registered exchanges.&#xA;exchange_id: Unique exchange identifier exchange_name: Name of the exchange TB_EXCHANGE_API_KEYS manages the API keys linked to exchanges per user.</description>
    </item>
  </channel>
</rss>