<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React :: Tag :: Black_JJW&#39;s Blog</title>
    <link>https://blackjjw.github.io/tags/react/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://blackjjw.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Project Initialization</title>
      <link>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/initializeproject/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/initializeproject/index.html</guid>
      <description>In fact, I had been working on a similar project for some time. Although I tried to complete it, I eventually gave up because it was too complex and inefficient to move forward with. So I decided to restart the project from scratch.&#xA;1. Project Tech Stack Area Tech Backend Python(FastAPI), Redis, Redis Queue(RQ), PostgreSQL Frontend React + Vite Infra Docker, Docker Compose, .env, .yml 2. Backend Settings 2.1 backend.DockerFile This DockerFile installs backend system dependencies and Python packaging tool(uv) for the Python 3.12.11 environment.</description>
    </item>
    <item>
      <title>6. Login</title>
      <link>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/login/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/login/index.html</guid>
      <description>In this section, I’ll explain how I made the login function. This project is designed as a single-user program. In other words, only the administrator is authorized to access and operate the system. Therefore, I created a single account with the ID: “admin”.&#xA;1. The design of the login function 1.1 Diagram This shows the communication between the frontend, backend, and DB.</description>
    </item>
    <item>
      <title>7. Topbar Menu</title>
      <link>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/topbarmenu/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/topbarmenu/index.html</guid>
      <description>In this section, I’ll explain how I implemented the topbar menu. I implemented this menu to test and operate various functions between backend and the worker services.&#xA;1. The design of the Topbar Menu To keep things simple, I used react-bootstrap for the UI components, as I’m not currently focused on visual design. I’ll improve the visual styling in a future version after completing version 1 of this project. The topbar includes a set of menu items and a logout button. 1.1 Topbar Menu Structure To visualize the layout, I created a simple diagram of the topbar menu.</description>
    </item>
    <item>
      <title>11. Managing API Keys - Frontend Implementation</title>
      <link>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/mngapikeys2/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/multi-crypto-trading-tool/dev-logs/mngapikeys2/index.html</guid>
      <description>This post outlines the frontend design and implementation for API key management.&#xA;1. The design of the API Key Management 1.1 API Key Management Structure To visualize the layout, I sketched a simple diagram of the API Key management page.&#xA;Left-side Menu Items: Under Settings, several submenus are available.&#xA;Exchanges: Area for managing exchanges.&#xA;API Keys: Area for managing API keys.</description>
    </item>
  </channel>
</rss>