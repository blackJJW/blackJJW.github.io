<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uv :: Tag :: Black_JJW&#39;s Blog</title>
    <link>https://blackjjw.github.io/tags/uv/index.html</link>
    <description></description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://blackjjw.github.io/tags/uv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Project Initialization</title>
      <link>https://blackjjw.github.io/projects/multi-crypto-trading-tool/initializeproject/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/projects/multi-crypto-trading-tool/initializeproject/index.html</guid>
      <description>In fact, I had been working on a similar project for some time. Although I tried to complete it, I eventually gave up because it was too complex and inefficient to move forward with. So I decided to restart the project from scratch.&#xA;1. Project Tech Stack Area Tech Backend Python(FastAPI), Redis, Redis Queue(RQ), PostgreSQL Frontend React + Vite Infra Docker, Docker Compose, .env, .yml 2. Backend Settings 2.1 backend.DockerFile This DockerFile installs backend system dependencies and Python packaging tool(uv) for the Python 3.12.11 environment.</description>
    </item>
    <item>
      <title>2. Setting Up the Backend</title>
      <link>https://blackjjw.github.io/projects/multi-crypto-trading-tool/startbackend/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blackjjw.github.io/projects/multi-crypto-trading-tool/startbackend/index.html</guid>
      <description>1. Installing FastAPI We will use FastAPI as the backend server framework due to its performance and asynchronous capabilities - it’s a better fit than the Flask for real-time and modular systems. Install it along with the ASGI server uvicorn using uv: uv pip install &#34;fastapi[all]&#34; uvicorn fastapi[all] : Installs optional dependencies such as: pydantic, httpx, python-multipart, jinja2, email-validator uvicorn : Lightweight ASGI server used to run FastAPI applications 2. Setting the Lifespan in FastAPI To manage startup and shutdown tasks (e.g., initializing connections, cleaning resources), FastAPI provides a lifespan context manager. from fastapi import FastAPI from contextlib import asynccontextmanager @asynccontextmanager async def lifespan(app: FastAPI): # startup print(&#34;Starting up&#34;) yield # shutdown print(&#34;Shutting down&#34;) app = FastAPI(lifespan=lifespan) This function is called once during the application’s lifecycle: Before the first request is processed (startup) After the server shuts down (cleanup) Using lifespan() is useful for: Performance optimization Test stability (isolated setup/teardown) Clean resource management (DB, queues, sockets) @asynccontextmanager: This decorator from the contextlib module allows defining an asynchronous context manager using async def. It enables setup and cleanup logic around the yield statement, and is used here to control the FastAPI application’s lifespan events (startup and shutdown). 2.1 Execution Output When running the application with uv run main.py, you can see the startup and shutdown messages handled by the lifespan() function:</description>
    </item>
  </channel>
</rss>