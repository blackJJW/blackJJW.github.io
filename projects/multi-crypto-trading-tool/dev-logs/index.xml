<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev Logs :: Black_JJW&#39;s Blog</title>
    <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/index.html</link>
    <description>This section contains various development logs:</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Project Initialization</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/initializeproject/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/initializeproject/index.html</guid>
      <description>In fact, I had been working on a similar project for some time. Although I tried to complete it, I eventually gave up because it was too complex and inefficient to move forward with. So I decided to restart the project from scratch.&#xA;1. Project Tech Stack Area Tech Backend Python(FastAPI), Redis, Redis Queue(RQ), PostgreSQL Frontend React + Vite Infra Docker, Docker Compose, .env, .yml 2. Backend Settings 2.1 backend.DockerFile This DockerFile installs backend system dependencies and Python packaging tool(uv) for the Python 3.12.11 environment.</description>
    </item>
    <item>
      <title>2. Setting Up the Backend</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/startbackend/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/startbackend/index.html</guid>
      <description>1. Installing FastAPI We will use FastAPI as the backend server framework due to its performance and asynchronous capabilities - it’s a better fit than the Flask for real-time and modular systems. Install it along with the ASGI server uvicorn using uv:&#xA;uv pip install &#34;fastapi[all]&#34; uvicorn fastapi[all] : Installs optional dependencies such as: pydantic, httpx, python-multipart, jinja2, email-validator uvicorn : Lightweight ASGI server used to run FastAPI applications 2. Setting the Lifespan in FastAPI To manage startup and shutdown tasks (e.g., initializing connections, cleaning resources), FastAPI provides a lifespan context manager.</description>
    </item>
    <item>
      <title>3. Logger Configuration</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/loggerconfig/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/loggerconfig/index.html</guid>
      <description>For operating this project reliably, I need a robust logging system. So I decided the Loguru library for its simplicity and powerful features. The configuration was customized to meet the following requirements:&#xA;Custom Log Formatting Example:&#xA;2025-06-26 23:09:24 | INFO | main :lifespan :16 - Starting up the application... Persistent Log Files&#xA;Save logs using filenames that include the current date. Retain logs for 7 days only. Integration with FastAPI and Uvicorn Logs</description>
    </item>
    <item>
      <title>4. Set Configurations</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/setconfig/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/setconfig/index.html</guid>
      <description>I used a .env file to store configuration values. To load them into the application, I’m using BaseSettings from the pydantic_settings package.&#xA;Here’s an sample .env file used to configure the PostgreSQL database connection:&#xA;POSTGRES_HOST=localhost POSTGRES_PORT=5432 POSTGRES_USER=myuser POSTGRES_PASSWORD=secret POSTGRES_DB=cryptobot 1. Settings pydantic_settings.BaseSettings is an extended version of Pydantic’s model designed for managing environment variables.&#xA;It’s commonly used in Python backend frameworks like FastAPI to load and validate environment variables.</description>
    </item>
    <item>
      <title>5. Database Connection Management</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/databaseconnmng/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/databaseconnmng/index.html</guid>
      <description>In this section, I’ll explain how I configured SQLAlchemy for managing database connections and sessions in a reusable and scalable way.&#xA;1. Purposes of this Management Use SQLAlchemy for ORM-based database interaction Create a reusable engine and session maker Why SQLAlchemy? I chose SQLAlchemy because it is one of the most powerful and flexible ORM libraries in Python. It allows me to:&#xA;Interact with the database using Python classes instead of raw SQL Write reusable, composable queries using the SQL Expression Language Manage sessions, transactions, and connection pooling efficiently Support multiple database backends (e.g., PostgreSQL, SQLite, MySQL) This flexibility makes it ideal for a project like this where maintainability and scalability are important.</description>
    </item>
    <item>
      <title>6. Login</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/login/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/login/index.html</guid>
      <description>In this section, I’ll explain how I made the login function. This project is designed as a single-user program. In other words, only the administrator is authorized to access and operate the system. Therefore, I created a single account with the ID: “admin”.&#xA;1. The design of the login function 1.1 Diagram This shows the communication between the frontend, backend, and DB.</description>
    </item>
    <item>
      <title>7. Topbar Menu</title>
      <link>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/topbarmenu/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/multi-crypto-trading-tool/dev-logs/topbarmenu/index.html</guid>
      <description>In this section, I’ll explain how I implemented the topbar menu. I implemented this menu to test and operate various functions between backend and the worker services.&#xA;1. The design of the Topbar Menu To keep things simple, I used react-bootstrap for the UI components, as I’m not currently focused on visual design. I’ll improve the visual styling in a future version after completing version 1 of this project. The topbar includes a set of menu items and a logout button. 1.1 Topbar Menu Structure To visualize the layout, I created a simple diagram of the topbar menu.</description>
    </item>
  </channel>
</rss>